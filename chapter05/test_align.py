import align
import numpy as np
from pathlib import Path
from pandas import DataFrame


def read_weighted_graph(file_name):
    with open(file_name) as input_file:
        lines = input_file.readlines()
    adj = {}
    for line in lines:
        left, right = line.rstrip().split('->')
        vertex = left
        vertex2, weight_s = right.split(':')
        weight = int(weight_s)
        current = adj.get(vertex, [])
        current.append((vertex2, weight))
        adj[vertex] = current
    return adj


def test_dp_change():
    change = align.dp_change(40, [50, 25, 20, 10, 5, 1])
    assert change == 2

    change2 = align.dp_change(19415, [18, 16, 7, 5, 3, 1])
    assert change2 == 1080

    change3 = align.dp_change(16042, [16, 13, 11, 8, 7, 5, 3, 1])
    assert change3 == 1003


def test_manhattan_tourist():
    down = np.array([[1, 0, 2, 4, 3],
                     [4, 6, 5, 2, 1],
                     [4, 4, 5, 2, 1],
                     [5, 6, 8, 5, 3]])

    right = np.array([[3, 2, 4, 0],
                      [3, 2, 4, 2],
                      [0, 7, 3, 3],
                      [3, 3, 0, 2],
                      [1, 3, 2, 2]])

    dist = align.manhattan_tourist(down=down, right=right)
    assert dist == 34

    down2 = np.array([[4, 4, 2, 1, 3, 1, 0, 0, 1],
                      [4, 3, 0, 2, 0, 4, 3, 4, 4],
                      [2, 3, 3, 1, 2, 1, 2, 2, 0],
                      [3, 0, 3, 3, 2, 1, 1, 3, 4],
                      [2, 3, 1, 2, 2, 0, 2, 3, 2],
                      [2, 2, 2, 0, 4, 2, 1, 0, 3],
                      [4, 3, 1, 1, 0, 1, 1, 4, 2],
                      [0, 0, 2, 2, 2, 1, 2, 4, 2],
                      [4, 3, 0, 3, 1, 3, 2, 3, 1],
                      [1, 4, 1, 0, 3, 4, 1, 2, 1],
                      [4, 4, 0, 4, 1, 4, 3, 1, 2],
                      [4, 1, 2, 3, 1, 3, 3, 3, 0],
                      [3, 1, 0, 2, 2, 0, 4, 4, 0],
                      [2, 0, 1, 0, 0, 3, 1, 1, 1],
                      [0, 1, 3, 2, 2, 2, 1, 2, 1],
                      [0, 2, 0, 3, 1, 2, 2, 4, 2],
                      [2, 0, 4, 1, 3, 3, 2, 4, 0],
                      [2, 3, 1, 3, 4, 2, 1, 4, 4]], dtype=np.int)

    right2 = np.array([[3, 3, 1, 1, 3, 4, 4, 4],
                       [4, 0, 3, 1, 0, 3, 4, 4],
                       [2, 2, 2, 3, 3, 1, 1, 4],
                       [1, 3, 1, 4, 4, 2, 0, 1],
                       [0, 2, 0, 3, 3, 3, 1, 0],
                       [3, 2, 0, 4, 1, 4, 4, 3],
                       [3, 0, 1, 1, 0, 3, 3, 0],
                       [3, 1, 1, 0, 2, 3, 4, 0],
                       [2, 4, 2, 1, 1, 3, 1, 2],
                       [1, 0, 4, 3, 0, 3, 3, 0],
                       [2, 3, 2, 4, 4, 3, 3, 0],
                       [3, 1, 2, 0, 3, 4, 3, 2],
                       [0, 0, 4, 1, 4, 0, 3, 4],
                       [3, 2, 3, 2, 0, 1, 2, 1],
                       [4, 3, 3, 2, 0, 1, 1, 2],
                       [0, 0, 4, 1, 2, 4, 0, 3],
                       [3, 4, 0, 1, 2, 3, 0, 1],
                       [4, 0, 2, 4, 2, 2, 4, 0],
                       [4, 3, 4, 2, 2, 3, 2, 3]], dtype=np.int)

    dist2 = align.manhattan_tourist(down=down2, right=right2)
    assert dist2 == 80


def test_dag_longest_path():
    adj = {'0': [('1', 10), ('2', 4)],
           '2': [('3', 2), ('5', 1)],
           '1': [('4', 1)],
           '3': [('4', 3)],
           '5': [('3', 4)]}

    topo_order = align.topological_ordering(adj)
    assert topo_order == ['0', '2', '5', '3', '1', '4']
    path, distances = align.dag_longest_path(adj, '0', '4')
    assert distances[-1] == 12
    assert path == ['0', '2', '5', '3', '4']

    adj2 = read_weighted_graph(Path('test/testcase01.txt'))
    topo_order2 = align.topological_ordering(adj2)
    assert topo_order2 == ['0', '2', '3', '1', '4']
    path2, distance2 = align.dag_longest_path(adj2, '0', '4')
    assert distance2[-1] == 9
    assert path2 == ['0', '2', '3', '4']

    adj3 = read_weighted_graph(Path('test/testcase03.txt'))
    path3, distances3 = align.dag_longest_path(adj3, '5', '8')
    topo_order3 = align.topological_ordering(adj3)
    assert topo_order3 == ['4', '3', '2', '1', '5', '7', '6', '8']
    assert distances3[-1] == 5
    assert path3 == ['5', '6', '8']

    adj4 = read_weighted_graph(Path('test/testcase02.txt'))
    topo_order4 = align.topological_ordering(adj4)
    assert topo_order4 == ['9', '10', '3', '19', '2', '6', '4', '0', '7', '13', '8', '1', '11', '5', '14', '15', '23',
                           '26', '21', '17', '27', '12', '25', '28', '20', '24', '16', '18']
    path4, distances4 = align.dag_longest_path(adj4, '5', '20')
    assert path4 == ['5', '14', '15', '20']
    assert distances4[-1] == 36

    adj5 = read_weighted_graph(Path('test/testcase04.txt'))
    topo_order5 = align.topological_ordering(adj5)
    assert topo_order5 == ['2', '9', '5', '8', '3', '6', '19', '7', '0', '4', '11', '1', '12', '18', '13', '21', '22',
                           '26', '10', '14', '15', '16', '17', '20', '23', '24', '27', '25']
    path5, distances5 = align.dag_longest_path(adj5, '12', '27')
    assert distances5[-1] == 94
    assert path5 == ['12', '13', '21', '22', '24', '27']


def test_longest_common_string():
    string1 = 'ATGTTATA'
    string2 = 'ATCGTCC'
    res = align.longest_common_string(string1, string2)
    assert res == 'ATGT'

    string1 = 'AACCTTGG'
    string2 = 'ACACTGTGA'
    res = align.longest_common_string(string1, string2)
    assert res == 'ACCTTG'

    string1 = 'AGCAGTTCCCTGATTGTTTAGTATTTGACTCCGTAGTTGAGCCTATATCGTAATTCTGCCAAGGAA'
    string2 = 'ATTATAATCCCCCGGACAAGAACCTAGTGGGCGCGTGGGACGGGACAAGAGCGACGTTCCGTAGGTGTGAGAGCCGTACTCAATTTTGGTTATTACCAT'
    res = align.longest_common_string(string1, string2)
    assert res == 'AATTCCCGATTGTAGAGACTCCGTAGTTGAGCCTACTAATTTGAAA'


def test_best_protein_alignment():
    alphabet, scoring_matrix = align.get_blosum62()

    score, alignment = align.best_alignment('PLEASANTLY', 'MEANLY', scoring_matrix, alphabet, sigma=5, local=False)

    assert score == 8
    assert alignment == ('PLEASANTLY', '-ME--AN-LY')

    score, alignment = align.best_alignment(
        'KHLGRRPTYGFPFWYMVWDFQCQDDKEQKFFCKPRHVPCTWLGCEVTDEMWMDLHVEVQPQFCLVRQEFWHIFPPFSSIYWMYFDPSDVNRIMHDD',
        'KPTYGFPFWYMDWDFQCQDEWKKEIRFCKEQKFFCKPRHVPCWWLGCEVMDLHTQRYFWH',
        scoring_matrix,
        alphabet,
        sigma=5,
        local=False)

    assert score == 43
    assert alignment[
               0] == 'KHLGRRPTYGFPFWYMVWDFQCQD----D----KEQKFFCKPRHVPCTWLGCEVTDEMWMDLHVEVQPQFCLVRQEFWHIFPPFSSIYWMYFDPSDVNRIMHDD'

    assert alignment[
               1] == 'K-----PTYGFPFWYMDWDFQCQDEWKKEIRFCKEQKFFCKPRHVPCWWLGCEV-----MDLH--T--Q----R------Y--F----W------------H--'


def test_local_protein_alignment():
    alphabet, scoring_matrix = align.get_pam250()

    score, alignment = align.best_alignment('MEANLY',
                                            'PENALTY',
                                            scoring_matrix=scoring_matrix,
                                            alphabet=alphabet,
                                            sigma=5,
                                            local=True)

    assert score == 15
    assert alignment == ('EANL-Y', 'ENALTY')

    s1 = 'AMTAFRYRQGNPRYVKHFAYEIRLSHIWLLTQMPWEFVMGIKMPEDVFQHWRVYSVCTAEPMRSDETYPCELFTVFDDIFTAEPVVCSCFYDDPM'
    s2 = 'WQEKAVDGTVPSRHQYREKEDRQGNEIGKEFRRGPQVCEYSCNSHSCGWMPIFCIVCMSYVAFYCGLEYPMSRKTAKSQFIEWCDWFCFNHEFIPWVLRRYVVYDKIRYNYSYRNSASMEFV'

    score, alignment = align.best_alignment(s1,
                                            s2,
                                            scoring_matrix=scoring_matrix,
                                            alphabet=alphabet,
                                            sigma=5,
                                            local=True)

    assert score == 56
    assert alignment[0] == 'KHFAYEIRLSHIWLLTQMPWEFVMGIKMPE-DVFQH---W-RVYSVCTAEPMRSDETYPCEL-FTVFDDIFTAEPVV-CS--CFYDD'
    assert alignment[1] == 'RH-QY--REKEDRQGNEIGKEFRRGPQVCEYSCNSHSCGWMPIF--CIV-CMSYVAFY-CGLEYPMSRKTAKSQFIEWCDWFCFNHE'

    s1 = 'LLQWKRYAVWQFNHLQFPVHAAAAAAAAAADVAGTQCA'
    s2 = 'ANQCQYLSDGRCIRINHPFYVNSLVAAAAAAAAAAAKGAAAAAAAAAAGPPWVYIPAQWTGYVETRIGPT'

    score, alignment = align.best_alignment(s1,
                                            s2,
                                            scoring_matrix=scoring_matrix,
                                            alphabet=alphabet,
                                            sigma=5,
                                            local=True)

    assert score == 32
    assert alignment[0] == 'RYAVWQFNHLQFPVHAAAAAAAAAADVAG'
    assert alignment[1] == 'RC-IR-INH-PFYVNSLVAAAAAAAAAAA'


def test_edit_distance():
    dist = align.edit_distance('PLEASANTLY', 'MEANLY')
    assert dist == 5

    s1 = 'GGACRNQMSEVNMWGCWWASVWVSWCEYIMPSGWRRMKDRHMWHWSVHQQSSPCAKSICFHETKNQWNQDACGPKVTQHECMRRRLVIAVKEE'
    s2 = 'GMWGFVQVSTQSRFRHMWHWSVHQQSSECAKSICHHEWKNQWNQDACGPKVTQHECMANMPMHKCNNWFWRLVIAVKEEKVRETKMLDLIHRHWLVLNQGRMNEHNVTLRKSPCVKRIMHKWKSRTTFHR'
    dist = align.edit_distance(s1, s2)
    assert dist == 97

    dist = align.edit_distance('AC', 'AC')
    assert dist == 0

    dist = align.edit_distance('AT', 'G')
    assert dist == 2

    dist = align.edit_distance('CAGACCGAGTTAG', 'CGG')
    assert dist == 10

    dist = align.edit_distance('CGT', 'CAGACGGTGACG')
    assert dist == 9


def test_fit_aligh():
    long = 'CCAT'
    short = 'AT'
    score, (aligned1, aligned2) = align.fit_align(long, short)
    assert score == 2
    assert aligned1 == aligned2 == 'AT'

    long = 'GTAGGCTTAAGGTTA'
    short = 'TAGATA'
    score, (aligned1, aligned2) = align.fit_align(long, short)
    assert score == 2
    assert aligned1 == 'TAAGGTTA'
    assert aligned2 == 'T-A-GATA'

    long = 'GACTTCTACTGACTTACTAGCAACGCTACACGTACGATCTATGCATACGTAGCTATCCTACGCACGTACGCGC'
    short = 'GGCACGCTAACGTACCCGATCTATAA'
    score, (aligned1, aligned2) = align.fit_align(long, short)
    assert score == 15
    assert aligned1 == 'AGCAACGCTACACGTA--CGATCTATGCA'
    assert aligned2 == 'GGC-ACGCTA-ACGTACCCGATCTAT-AA'


def test_overlap_alignment():
    s1 = 'PAWHEAE'
    s2 = 'HEAGAWGHEE'
    score, (aligned1, aligned2) = align.overlap_align(s1, s2)
    assert score == 1
    assert (aligned1, aligned2) == ('HEAE', 'HEA-')

    s1 = 'GTACGTTCAGCTAATCCTAGCATGGTATAGCTATAGCCGACGCCGCCTCCCGACATAGCTAA'
    s2 = 'GACTAGCTACTAGCCGACGCGCCTCCCGACATAGCTAATCATAATCAGACCATCGACGGACTAGCCATGC'
    score, (aligned1, aligned2) = align.overlap_align(s1, s2)
    assert score == 28
    assert s1 == 'GTACGTTCAGCTAATCCTAGCATGGTATAGCTATAGCCGACGCCGCCTCCCGACATAGCTAA'
    assert s2 == 'GACTAGCTACTAGCCGACGCGCCTCCCGACATAGCTAATCATAATCAGACCATCGACGGACTAGCCATGC'


def test_align_with_gap_penalties():
    alphabet, scoring_matrix = align.get_blosum62()

    ammino1 = 'PRTEINS'
    ammino2 = 'PRTWPSEIN'
    score, (aligned1, aligned2) = align.align_with_gap_penalties(ammino1,
                                                                 ammino2,
                                                                 alphabet,
                                                                 scoring_matrix,
                                                                 gap_open_penalty=11,
                                                                 gap_ext_penalty=1)

    assert score == 8
    assert aligned1 == 'PRT---EINS'
    assert aligned2 == 'PRTWPSEIN-'

    ammino1 = 'WC'
    ammino2 = 'WHC'
    score, (aligned1, aligned2) = align.align_with_gap_penalties(ammino1,
                                                                 ammino2,
                                                                 alphabet,
                                                                 scoring_matrix,
                                                                 gap_open_penalty=11,
                                                                 gap_ext_penalty=1)

    assert score == 9
    assert ammino1 == 'WC'
    assert ammino2 == 'WHC'

    ammino1 = 'YHFDVPDCWAHRYWVENPQAIAQMEQICFNWFPSMMMKQPHVFKVDHHMSCRWLPIRGKKCSSCCTRMRVRTVWE'
    ammino2 = 'YHEDVAHEDAIAQMVNTFGFVWQICLNQFPSMMMKIYWIAVLSAHVADRKTWSKHMSCRWLPIISATCARMRVRTVWE'
    score, (aligned1, aligned2) = align.align_with_gap_penalties(ammino1,
                                                                 ammino2,
                                                                 alphabet,
                                                                 scoring_matrix,
                                                                 gap_open_penalty=11,
                                                                 gap_ext_penalty=1)

    assert score == 144
    assert aligned1 == 'YHFDVPDCWAHRYWVENPQAIAQME-------QICFNWFPSMMMK-------QPHVF---KVDHHMSCRWLPIRGKKCSSCCTRMRVRTVWE'
    assert aligned2 == 'YHEDV----AHE------DAIAQMVNTFGFVWQICLNQFPSMMMKIYWIAVLSAHVADRKTWSKHMSCRWLPI----ISATCARMRVRTVWE'

    ammino1 = 'GLWFLNEPSSPQYEFPWDYIHRQNKIEKIPVNMKVFNSNPPMPQTFTEQIIIACMADCAFCYGAGQRWCSYVP'
    ammino2 = 'GLWFLNEPSSPQYEAPSDYGTDPHLQNKIEKIPIYALAPNMWTVDPEKVFNSNPPMPQNIMFQEQIIIACMVWCSYVP'
    score, (aligned1, aligned2) = align.align_with_gap_penalties(ammino1,
                                                                 ammino2,
                                                                 alphabet,
                                                                 scoring_matrix,
                                                                 gap_open_penalty=11,
                                                                 gap_ext_penalty=1)
    assert score == 226
    assert aligned1 == 'GLWFLNEPSSPQYEFPWDY---IHRQNKIEKIPV-----NM------KVFNSNPPMPQT--FTEQIIIACMADCAFCYGAGQRWCSYVP'
    assert aligned2 == 'GLWFLNEPSSPQYEAPSDYGTDPHLQNKIEKIPIYALAPNMWTVDPEKVFNSNPPMPQNIMFQEQIIIACMV-----------WCSYVP'


def test_scoring_matrix_as_dict():
    alphabet, scoring_matrix = align.get_blosum62()
    as_dict = align.scoring_matrix_as_dict(alphabet, scoring_matrix)
    scoring_matrix = DataFrame(scoring_matrix, columns=alphabet, index=alphabet)
    for item1 in alphabet:
        for item2 in alphabet:
            assert as_dict[item1][item2] == scoring_matrix[item1][item2]


def test_middle_edge():
    alphabet, scoring_matrix = align.get_blosum62()

    res = align.middle_edge('FP', 'PF', alphabet, scoring_matrix, sigma=5)
    assert res == (-3, ((2, 1), (2, 2)))

    res = align.middle_edge('FPPF', 'FFPF', alphabet, scoring_matrix, sigma=5)
    assert res == (15, ((2, 2), (3, 3)))

    s1 = 'FPPPFPFFF'
    s2 = 'PPFPPPFFF'
    res = align.middle_edge(s1, s2, alphabet, scoring_matrix, sigma=5)
    assert res == (32, ((3, 4), (4, 5)))

    s1 = 'PLEASANTLY'
    s2 = 'MEASNLY'
    res = align.middle_edge(s1, s2, alphabet, scoring_matrix, sigma=5)
    assert res == (17, ((4, 3), (5, 4)))

    s1 = 'ACTTAATT'
    s2 = 'GAGCAATT'
    res = align.middle_edge(s1, s2, alphabet, scoring_matrix, sigma=5)
    assert res == (15, ((4, 4), (5, 5)))

    s1 = 'TWLNSACYGVNFRRLNPMNKTKWDCWTWVPMVMAAQYLCRIFIPVMDHWEFFGDWGLETWRLGIHDHVKIPNFRWSCELHI'
    s2 = 'LWFKFLQCIFQYFKDQQETNCIWTFSPFSEHICQRVCQVYWNWNTPSSRTSDPRELFANSTIHNNRCGEWR'
    res = align.middle_edge(s1, s2, alphabet, scoring_matrix, sigma=5)
    assert res == (14, ((40, 35), (41, 36)))

    s1 = 'TWLNSACYGVNFRRLNPMNKTKWDCWTWVPMVMAAQYLCRIFIPVMDHWEFFGDWGLETWRLGIHDHVKIPNFRWSCELHIREHGHHFKTRFLKHNQFTQCYGLMPDPQFHRSYDVACQWEVTMSQGLMRFHRQNQIEKQRDRTSTYCMMTIGPGFTSNGYDPFVTITITPVQEPVENWFTPGGSMGFMIISRYMQMFFYLTRFSDMTYLVGVHCENYVCWNNVAKFLNGNLQGIFDQGERAYHQFVTWHSYSQYSRCSVGRYACEQAMSRVNSKMTWHWPIRDQGHEHFSEQYLSEKRNPPCNPRIGNAGQHFYEIHRIAHRVAMCNWAPQGQHPGGPTPHDVETCLWLWSLCLKGSDRGYVDRPWMFLADQLGEANLTLITMFHGCTRGCLMWFMDWEECVCSYSVVNPRCHGSEQWSVQNLGWRTCDTLISLWEPECDKHNTPPCLHWEFEDHPSQLRPVMMCDKYVQSIPTDAKWAWTYSKDFVISHWLIWTPIKLEECVFPQINRLWGTACNQGSQKIVIQNVWLRPSSFFQERSKCSDSSCILNVGGSNVNITGKETRTHVPILHMHEIDLISTASSGMRHNLILPHGMLMLHMNWHHSTRAMNPYSSLKLIPWTFQVCETDDRDQNVATHVADPCHKGEDQEIRCCKGGVDHQWKGDRMWMMCMPDMNYVKQDQAPSGTCEGACENYPADKDKCYMIFTIVFDYRRCTKKVCIWISGFPVDAFNLISIANAGFFCCWLEPTELKWRRTFYLGKGTQGWMCTFPHRNIIPVIICAGFGRWVQGEVPFRPVAQISAHSSDRRQGHHPPGTNMCHDYGDQYPIKRVGMQVEEDDGASYCDCAADWKLADMYEADHLSIGVIDFTDWIYPKNGGIWSEIIKSHFHWYHWETPQNTVGAFNTIVGINGSDMCIYHGNTQWEFGWCWKWLNHGHMRNQGPCHLGILEGRISKFAQVTSWWWQTKHDKDWSIEPYGRHWGEAGRPYTYNYCWMRWAIVYNHGNVISVELVPFMDEYPGKCNKEDVQFELFSPMQA'
    s2 = 'LWFKFLQCIFQYFKDQQETNCIWTFSPFSEHICQRVCQVYWNWNTPSSRTSDPRELFANSTIHNNRCGEWRYMFYHTRTLVQTAPLMKETLHSDGKHSMYCEQRHFFRSSYLIKVNYDVSHYLELYTFSEIPWKLTTHGWDGFSWFLLVNSCCTFDIDGKCGILSQCGMSRAFRTRQEDAYHFQTSLMHLHLHLHVQEGKHEKADLFAQFYNMLPMHGGTCGRNTEPSDLFDSATMNKYMAEHPASCKACPNVSKECFVYWWSHDFTKKHKLIEFSCGRDTGQTTQRTWNVDENEGGKWIWRFHYFMRAKALQIDPKFKPYWNEPRAIMRPGHVTAAPCICAQHSQNETAVCNRDQMHIHAIEFQQYHSRAFGEVQTWCDIGKENENDFIYEQHWWLVGGTEGMAGVIWKFVCARCRTQDCDFWKTCLTYSAQPMMKVYDTIFYVNSINPWEFEDHPSQCDKCVQSIPTDAKYAICGKFVISHWLYWTPQKFEECVHNNVRCAPMGNRLWGTACMVIQNVWLRPSMGSHFSCILNVGGSNINIQGKETWTHVPILHMHEIDLISTASSGMETCKPCFLSGPTIHMGFSYEIRAQPYSRDYFCMDWMQEADEVDHNRCETVQPTLPLLQQFEWKTSCMGQRWITIFCDHCQIVCFSTFFCVMPTFLPNTSILDKFYCIYLSISWTHYCNVHALGFIMRLHYSYMGWKEHKRMHAWDIGLDELWAQEGIQRAQLWCGDEFEVAKYPEWITEARTAIATRPWFHNCYIKPWWIREKHLWFGKESKLDHGHRGAMFTPVANDNTEWMHHWYMFCWAGSKNRLKRQIKEKLIFIIKFMITEFGLFLMIDYTQCYIAWMWAYTGIACYIDWEKCLKHDLTTTDLGCCVYRLFKWYEVRHRAPPQVNTRLPWSQIPMVAIQCNIVDECKEQWHFSYKASFVVEYLCPGCCTNGNRWQWYQVKETPFMYAFAASIFGFHHENLVVFITGSVTIPNGLFGCIAWTSPKPVQKTPASANTIIAYDKCILMG'
    res = align.middle_edge(s1, s2, alphabet, scoring_matrix, sigma=5)
    assert res[1] == ((512, 510), (513, 511))


def xxx():
    s1 = 'PTGQSYVTTARTTAECRVLHVMPFNYHMASIMDSYVFLNFGPALCMHEWYLCTMRCGWSKVGLGYMTCFCKNYHMSVKDAAYDGDKEMDGMTKWCVMPNCMWENEAQDQMQAWDSKGWQDFCDDIKAGMQFIWDSEPHGNFSEIMSMPFDIDVTIFHMQEPEIVQWTMNPQHSPHRPKSCTMASWRTQHHTAWNHCPVSASAFQPQVDVCDNVRFYGETAMNIVGGQAEAEKMKIHPSYQGHIHLCIGNEDTDGQQLWCQNHMQHEPFRYNDSDGDVTYQKHPACAAIPNIHSWFQPWGIDYQSNRQFGNQMDECYDLWALRVWDEPSVTWYYRHDLHDHSESWQRCETNVMWYKGAKDMRGDLWSPRVMIMVPFLTVWRCGVTCGWLWPKSFSKAMMRAQKIHEFPQQRIKTNGAKPDNEREWQAHHAFNTECKFVGPKPILLSKPWRQVDYDYCSFSDDMHFRKCVLTDEFFNVVSTKMVSQCWFWADTLNPEVSNQFMTQEYIVKMTSVCEVLNGVGGLPFVTADSCSSPVIEWGLWTNDQWEGFFKLYWVMLDNDKNPVKWPHNRGIVHGMWPIWWIEQNPIKVGQACMWYPLIDNYWEDNRDVLKPKEDMMAIDISGQVKGWATDIRPSSWSLYIIPDMVWRGSLCDLARVEYEHKPWHNCTTYHMRCVIFYYFAPIGNHNDATIPGWAEWCYWPKMWEGYVMVNCFTEQQHQAEAAVAWGWYGCTPNVPPVSPIMQSFKMFICPNQFQDLKLMQDPCWVLNKFSVNERQLDHCPMDASDHWSPSHNRWNLTFQAWPGRQEFAWPVLFFFSDVWWDAHDYIYVNVMGYTVYHAWSASWVVTQLGNIHGECWNCMVPPEIVMSNTNQKYEHYMIASREMVTPHRRRYAVCTFRNLAWKSFDQQFFCRENFIGIFPADCGIIKCEVFRDLQEFFDRENSKCDQNSQKNMHKFKYCFQFQPQDPVKQRLNPVHPWCRSEEDGLRTQEDIVRPAQYNEWPMHQNDAKLVQGCCIYKYKRKWIPRKYLKTYGTNMPEHFYYQRQVLSRYGSMRRMWIKNEQYVDHRDRYVMLEPGCETFFYSFVMEWDEINDNNSRSKEVAPPKEFDYMYNNTCHDTWRFSEQVKNDNQTQFFVKQTFVRLHLQLDQILPEAIFMSFTLDWPQYGYQIAKGNTFKCMQFTNYKGSTFGWLDVGPGNRPRHWWKTVFWQKWWISMWLDVQDLSKDAFDNMWEKQAMQKPKFHDTRFLQAESKDTRSKEADSKVDPWWRQHSQERFYPGGSECCWMDALHPLKLRNFVEFVVVTKLPNCLWHAFFQYFPEMWLCFMDHASPKQKVWRMNCYRADFCYFMCELGYETDDRSAETAIVMYEPMQMGWNHWWWLTWLHMACTLIIDHIMMNLQVALYGCIQPLNFWMATFHLVWQAKVFFFFAFERFHTHVIMCQKAKENESHRLQPEERMSKWHYTCCGTMFHVNWHAEQGKSGMYTQALRLTHFTVWDQGSHLMCTGIYMDMPQNHCSWARHRTDPCALVVHWGPKVPKPNDTFGCHPNNSEIEPFPPRDDAQANHIEDCHEYRFCGMTHNAYTDHPGFLRNCTENVTEKIMEGPLYPWDNDRGSHAQLVMWCRVASEAVQWVSSGYKGINSAYRYVNLWGKHICRAWQDWDWVGVHIQCNHIWGQETDPDEQWLCIHENGINFFDSNLADYTAEQEDFGDWYCQKSHLHSKVDVKQYSQIATIIWTWQHTNCGCSTCWVPLHRIFSLDNDVPPCIQVYMGDKRQMWRNKDNHNKSQMTYMKLECMFPDKDFRQQSTGERPVTELMCKNIWTVHYCYIAMFYDVEPKCDIEDCYMGVAYMMSFAEGFMHMYKALVCPKSGSMYDWTVVQIIYTWQYFWHRPETTESTWTNQRHPLQLGWNTSLMENIFAIESMKKMTCYAKEPTMRRAAIWLVQMSSYMVHHKCPRHYNEHLRLLVPCSWCQQDKWNESCQWHHPDPYIMKPSYAWWDLLNTCDPVWRRNTYCCKMANRAAHQDWSSNGDRHNYPVIRMENTSDTHNMNMYESVPERPDTFCGLNSSLQGHEWQMYSQAHHPDMFTENMQDYYYGTIVFCHAGICWCWLMHIQYSCCHYACCIPLKPLCAFIESQCQIVNQSFASRTTCQDQSFPHYLIYEDFVIAYEIWDKTAPQMFPFYYYWRWVDRTDCHVQDETDGSWTKEDCAGCSCSRELSYMGFNWVFPYSRTVQLMMEHVPGWCYMSGVFLKLHPFVGMIQKGKTHHIWHGDRWHGKGYNVSTDYYDCVYYEPCLRNKYMSDVIGYTGWLGWVQTLTDHVKSSPSKGRIPVWNQFTQVKKYQVMEHLFYKGAHQDHICVTCEGWVMPPNQCFWFQDQDSQCSLQSDQMERLEAVCYPTMWYRGAWKRHNHTRLWLTTYDPGYCRNRDWAWVTCCNCIAALMQQESNRKYQWCWCYWSTNHPMHNSDIYVVWDDDGERPDGCSNEIRQAKRPCTCDISDARPLKIYMIYCFPCEGKYIDIWMGKMRAFDFLNFMDGKFTIRDGAIFPPQMVPCNVLVFELVYKSVWAETPTIRGWYQCWPAQKVYANGWISMLVIMDFAQKKFVGHDLSTATCMNHRVDCFKNNVRRHVEPPLMLIMNKIWCEHDFMTAMDVIIYASPDMYMPGKPYLGTFQYPYLYKHGSSDYVELEASKINGYMPYWCHESEDSTCHALHDPAHCDLRWMFMCCPRTTKPYVWMCNTWIRYDKQDLAPVNSFIPAHQDVHPYCTCGRAVWTQKRFWKAWWFLITCPDPHDSYRSFDEVGEPIETACRDDCVINIYHSQYNMSSWAKAVAFIKWMTPLQPYEPCFCQKMEFKQWWEKLCVAWSQPVFNFSIPKHVFIVERYIEDEHWEVIYWMKKFVIPKLHMGPWQSCTIGYREYACIGIDAHDPYRCGDKNMANMRFPWWDIISFLLFQPLPMECSYHGQGTFCLKWIAARNGTYQFRIVEVYKFSSAEVNRNTQYFSHHHMMLMPHNFYHMGTFDYCWLKYPFPTMDWNVSTTSPNILGLENHKDLCIMVMNCEREMTPERIMQYKVLLSLWRENVVMPCCLIALVNLLGQNKENTPLDCPKMPMVMDYHPRKFWLSPGFIGKYHIAQRTRQWRLIFCPAQTKMDVCASYPFPGPRTDHTRSMWLMGHSTAPEFMFMTNKNMQIGCPPVGAQGHVEPPTRQRKGKHQYVCEPWKMWKHKPQWRAWAINWKKVITCWSVSFDFPWDSIFTVKDCELRGGSFAMMRKAYQPPRMSQLPWVVKCNFSPKQGYEQYITVDGKTQKTRVIDPMPDPHHATYGIMFSHQYTVNWIHNCERLTMAKINRVYFTIIADRWGHYCVNINHQTLQMDDMMCYDDSVSGQGYLCMCCTIIPWGQCVNAYIHRCWHCTDVYIHRLLPEQETVFQFCDNHMMAQMHLMPTLNEKGSFSWQRVMSGGVFWIVNGCNMYAFSHHWLAPHHDRTNQGVYMLSQPQMCWALNDDHTYHKNNINAWEPPIGTHTGWLRAEEMTGSPDRLLLIWGFMCRAMYSCHLDACARNLQFNFLMKVGHHNQHQYWAWCEQCLDCKSWDTNASSKLEFNYETLTDLTGHPPQRPDVFFCDDCVAYCEFLKHTSPLDRWYEPRPRRLGQWVKSLGSGNPPACFEWCYIRYDCWYCNVVPIEHTEDPMHWHENWDNNCIGQQHWINVMCQMMTPNNAGIHPVRPCIHPDDNVRMPYECHNMEPERVQFVDQVTGAPYRANATLPCDHDGFEAFMAPDLTETYVQDQKYCKGVPFQMSKPNQASIPLWSYILYSCEMACIEIYIMKGWMLKQSFHGSPHKTVTCIGTHCMIRHQACCNNDKFAVANRAHEFRWYWARLNGQKMIEFFESFRDMIKISPCMRWRDDAPGSGLHIWAAHIFMEVEKLVWTLAIMNCAYAAYPVMEPHPLGWVDTGYVKSHFQLAYSICFCGQIINRIMILQARYQYVAPATCRLHSCGDDAALTPVNWSFNMGHGMPNINYILNWNRKRWGNFRHQMHIPPGQQCRCWRALKDDNVMHEDTT'
    s2 = 'QVPFPTVDVIVCCTGIKCEPMNVGYDQQMKDCFICTREYDIRRLHTIVCGSEWACRLWIEADWEDCEKSFRDFDAPINIVQYAVWRANVETQCPGYLNRTQWIMIGYWFIGTWNAVLIVPKSPAQIETDGIVYKIPCNRYFEHGPYFWRSPWAGPYPTVDRHDSVCHGHLKYGSLPSCQNWEFARPHDLGDACMWEKPQLQLNWNPRPRAIISTGTFSPEQTFWDGMPWKYFWKCPSSVQANKRLYKVLTVVCRQENHGYKETHRKFHIKCLVGQLNQPKPWCVYCVVYRSDYPPPQRWTFWGTPQYIMCFVKPHKLSDESAIGNWWNIGPCDRLVASAWEHCKRLGWYPHGWAKSMFPHMNIMGCSRKFRKASIEWPIMSHVGYCAHWHPFSRRVQFESNINQSLRWVVMSSFKDTDDHVALVCLTPAGEIPVTNVGQALAEQSYRIWSAQEHRAPFTGWMNLFCSIGMTMYIEKCSREPIIKDHDCFNDTADPSDTKVTSWMRKYWIEEDPTWRSNMIHMMGSIFSCNRMSNFMCYPESVRADWPIELWPGRLAIGFMNMGVASLEHYFPFIGFWVDYAPSPSEEHQWRHDAYAYDEVYAMVPMDCKLEGQTYTQCMMWKIDLVLLWSGNSEICIEQHESFSRSIYGHVSKAQAVMKYARRGPAHEQFVTGKSQHSQDCTHISPKIMLHSSIRIVAKHDMLRKEPHSDYHMLKTEFQDKYERMTTMMWGFPDWELPHTEQRHKLAGEVRQATASHYQQYYKPDHGTHEYVCPQPCLIAPWASGTPEFEMAYQLTCNGMFAKCYNRRTGQQVLQISVSHSCMRTKMANWYPSMDMFLEMSNGNADLASNRIGHFSYGHEFVEHPNVMWRPDGGRCHGHEAICNGLAYQYMWPVYHNRCNAKWVEVVHHQDSNFLPMIHGAGSHLHHQLAICYLLVCPVTGARCVGENLINFLVIICNWELIVFLIIEMVAEGLRRPMRNKCQATSFNLETYFRKKRMQCTLNRPYMTRTRRPHLWGPELRATNKQRDLPVTAVPCNQAQCKKFWGGVQDQSNDDVNWRDTKWDFSWGFSPAKVHWHQCVYDQGFHNLEYNPCLHWIWYMYTWMIAFERTVGKACHNWEQIPIDSLNNFQVHTDIWIELHCMNMSPYAFVNYSTCNAVAAKWYLELAIAHQSEPQKWFYFVSFILDSRFSPHNMVFYATSDGYRDKLKPLEFDIMMKRGTWTPEHWQSFTPHRKISPVHSTGIHEAVDIYQYFHEPFAMEPACKCMVMIYTVAIVHFKCIANHEVSGGTEINLVRCFHIWHCEEWKYMCHSWFEYNAIFRCEAMLCWKLFCGQSPIDMLTVEVKILWAVTPQMIACADAYLRPFMDWIGAFSLCQQTFCDLFAWPPQVQRFYWTVKEVEEQWYSHWVGKSVNINSSSDHNNRWVLWPYFKLLFNVANHQPDHCREAVWYNVASDRPHVFCMMAGGVPQKTMINQFRHSIIFSVQNPHFYGMQPTWCSERVALVCPKWHAPNAIPPPKFMHARAFWAVPTKCVYQEHDHYWHNHKTSHFPGTSPDIYEVRAQFRSAETHNHPYNDYKPLMFVKTHITIAKFIGGKMHMMGTQGYAMRPCDWESKMMVTFVKVVPPALTCIFFIPAQPHTMTGWALYDRYMVCRMCHEVEPCKWFVIDVDHNQNDSIMRSHPSERGTTGICDQKHHNLQHCNWELDGPPEISMTYPILNSELDLGWYHLWCGDGPMHPKFGRDRGVTEWKVTIKTPFNLAPTIENIDAQSITRWSQYMINKADMWQLQRVPHKCTPKDCYFGQQSFNERELCIWLADPLMAIAMFYKPLVDPPIEMEPKIESFAMYKAVPKSGSWIVVQIIYTPETTGWIEHYDTSTWTNQRHPLLLGWFSMWSCFENIFAWESMKKMTDYAKEPTMRRAAIWLGEDSQQMSSYFVHHKCCRHYNEHLRLLVPCSVIQRCQQDKWNESCQWHHPDPREPWQFGIKKPSYAWWDLLNTCAPFYPDHKNTYCCKMANRAASQDWKSNGDRHNAPVIRMENMYKSVPERPDTSKNDQHPDMFTENTQTIVFCHHDIGWCWLGHIQYSCCHYACVIICIEMLKPLCNWMHRIESQCTIVNQSFASRTTCQDQSFYLIYEMFVIAYEIWDKNAPQMFPYYYYWRWVDRTDCHVQDETDGGCWTKEDCAGCSCSRELSYIEERGYYWVFPYSRTVQAVMMEHVPGWCYMSGVFLKLHPLFHYDIHQTYIMRAVPTEWTQDMPKDHDWKLYQWDLQRKWSYQVGDELDVGPGCLRPAVAAAYFQTTCILCATAYEDYSEKNKEYRHYTACMSGGLFNHGQMESYKFDWMDWHRQGGDEKPDGGDIEHCYYCSNEASYTPATYGYMCNENGSALGRFMVMFVRMFVRASCSNRDLGDRWQWIFTDYWHCDNERAGCEKDMNQNFGGHWPLDYCFEFGWPCCEQRDCMHLCMCSYMVRVSQDFKSIWDERLGMIRDWRFFVSRNLQCMAWTTYKMEFCLQTYSQFILPARLQEVCDGLWLSDCHNYNWGRIMKWGQLKKVMVPRWEMMIAMRWDTRERWMYYVSHSDAEVAEPSVELNLGGMHAIKSTTWMWVKSTKTCRECMNNIYSVFTTCKKKIAMTFTHKPIKHDKPHTFRCMSNQTEPVCHCHDFHCIWKGFGLMHSGLESQFVDIHCKRPWIIHDKRQHSLGIAALKTCYCGVRKNGRGAQTNGRETGDGAEGIQLQIHLHAVRLKVVAHFSNAVLYDGSKRYMENQKHHMTLKSPSNMPYTNGCENGWYRPCHVQAYVANADFASPLEPMVYTKWWDEGSSWLKNRRGCQATQKSQKPKSMRELWLVTHLVGAHEGNCDHRLLFQYPRWIFHSNKYPDGWKHAHRAWDPDSYGDFWVKHGHHDLLLACKEEVLCTLYNFCKQELENLGWVCCVLMNVCWISHFGNGNYPYWHHRHWLHMENDCDIAEELKRVQGYLYRHKWWVGWELCDFFQANQDNHESRLQRLHQHRLTHNHCRFPKVRQQDIAVFWEVVSICGANRLVHIFACMIIKDAHMVERVHNLCDPTWWPQHLAMNSMGWYMQKLVEFMTPCGNLWSRKFCQIQMHGWVYFPRHWWYSIPDEAMVGVRNNESTASVIRVYFDEDINPTNSNPNRKPENHCKELLLNMMGCVRCAFNRKLTPHKEQSVSYMFIHQCYPLCAYNMRCMTTRCESHMTHEFQPGWRRQMETLVICRDAIVQFVMTVMIKRRMTDYSMSITYQEWTFKCLRHNFALRCKSGCAFVLEDQDVQLHGLPMKWYAMFNDMYMFKCIRTYIDEYASPDYNWNQPRWLITYATNTGSHAKTRQSNENCRRRIFYDYNRGMWLVLCTRERIHWWSLPYRKVHVLIPGHISASEHYQNLNNPPMYKAGMAEKSPGWQVTICRIEDVRPFDDDHLYGDEQEVHNSGCAQDSVHVKKMTPVLIDCGDRPIEWTCFQADYYNKPTHRFWRPDVKHPLNKYCHGGCDPDSNRSYCKWEDTCEDTTIKYSRTHSDFNVGSMATKYIDREHNKGSEKWFEGLGQRCNQPGEMKVNFTLEIMTFKPRMRSFDHEPESAMHNQYEFLNDGTTCMGFEKKGIHFFYKNICRNLQQYQCHCPLCYRMLPGQCECQNIIVSPRSVLQHLNCKQNENMKTSSACHRKIMHYKMKIYGVSIERRDQTFAVRMPNFECECWDMWEGSSWLKKWIHRCNDCNLDAPLERPAHFKHDSFWCTFGIWLQYCCCYSGFFCSMAHMMNYCLWCWEPLFPDKWDEYFSLTYDGVEGWCHDLIEQIDGEMLYGLTIPEIMPEGYPRVADDHFPYPEPSDDDSHNDKSEKKRSYLIPSFWQACHCCHFKTQQKCWACNSRIYLEADWLKHAILPIGRRLKRVVTKMHRQVERPVSLMRTFFNPVGCPDTSDNTGLPDLMNWVGQGITVGQCWHETIYGLSAVCWSPMLNTQTAEWTGGKYKTMDGGIARKEGYLGVKKLTQFGDTAWCTWEGHCDTWMRDYMMHWWYATEDMYQKLIGIG'
    sol

    sol2 = 'QVPFPTVDVIVCCTGIKCEPMNV-GYDQQMKDCFICTREYDIRRLHTIVCGSEW-ACRLWIEADWEDCEKSFRD-FDAPINI-VQYAVWRANVETQCPGYLNRTQWIMIGYWFIGTW-NAVLIVPKSPAQIETDGIVYKIPCNRYFEHGPYF-WRS-PWAGPYPTV-DR-HD-SVCHGHLKYGSLPS-CQNWEFARPHDLGDAC-M--WEKPQLQLNWNPRPRAIISTGTFSPEQTFWDGMPWKYFWKCPSSVQANKRLYKVLTVVCRQENHGYKETHRKFHIKCLVGQLNQPKPWCVYCVVYRSDYPPPQRWT-FWG--TPQ-YIMCFVKPHKLSDESAIGNWWNIG-PCDRLVASAWEHCKRLGWYPHGWAK-SM---FPHMNIMGCSRKF-R-KASIEWPIMSHVGYCAH-WHP-FSRRVQFES--NINQSLRWVVMSSFKDTDDHVALVCLTPAGEIPVTNVGQALAEQSYRIWSAQE--H-RAPFTGWMNLFCS-IGMTM-YIEKCSREPIIKDHDC-FNDT-ADPSDTKVTSWMRKYWIEE-DPTWRSNMIHMMGSIFSCNRMSNFMC-YPESVRADWPIELWPGRLAIGFMNMGVASLEHYFPFIG-FWVDYAPSPSEEHQWRHDAYAYDEVYAMVPMDCKLE-GQTYT-Q-CMMWKIDLV-LLWSGNSEICIEQHESFSRSIYGHVSKAQAVMKYARRGPAHEQFVTGKSQHSQDCTHISPKIMLHSSIRIVAKHDMLRKEP-H--SDYHMLKTEFQDKYERMTTMMWG-FPDW-ELPHTEQRHKLAGEVRQATASHYQQYYKPDHGTHEYVC-PQ-PCLIAPWASGTPEFEMAYQL-TCNGMFAKCYNRRTGQQVLQISVSHSCMRTKMANWYPSMDMF-LE-MS-NGNADLASNRIGHFS---Y-GHEFVEHPNVMWRPDGGRCHGHEAICNGLAYQYMWPVYHNRC-NAKW-VEVV-HHQDSNFLP-MIHGAGSHL-H-HQLAIC-YL-LVCPVTGAR--CVGENLINFLVIICNWELIVFLIIEMVAEGLRRPMRNKC-QATSFNLETYFRKKRMQCTLNRPYMTRTRRP-HLW-GPELRATNKQRDL--PV--TAVPC--NQA---Q--C--K-K-FW--GG-VQDQ-SN--DDVNW-RD--TKW-DF--SWGFSPAKV-HWHQCV-YDQGFHNLEYNPCLHW--I--WYMYTWMIA----FERTVGKACHN-W---EQIPIDSLNNFQVHTDIWIELHC-MN-MSPYA-FVNYSTCNAVAAKWYLELAIAHQSEPQKWF-YFVS-F-ILD-SRFS-P-H--NMVFYAT--SDGYRD-K-LKPLEFDIMM-KRGTWTPE-HWQSFTPHRKISPVHSTGIHEAVDIYQYFHEPFAMEP-ACKCMVMIYTVAIVH-FKCIANH-EVSGGTEI-N-LVRCFHIWHCEEWK-YMCHSWFEYNAIFR--C-EAMLCWKLFC--GQSPIDMLTVEVKILWAVTPQMIACADAYLRPFMDWIGAFSLCQQTFCDLFAWPPQVQRFYWTVKEVEEQWY-S-H--WVGKSVNINSSSDHNNRWVLWPYFKLLFNVANH-QPDHCREAVW-YNVASDRPHV-FCMMAGGVPQKTMINQFRHSIIFSVQNPHFYGMQPTWCSERVALVCPKWHAPNAIPPPKFMHARAFWAVPTKCVYQEHDHY-WH-NH-KTSHF-PGTSPDIYEVR-A-QFR-SAETHNHPYNDYKPLMFVK--T-HITIAKFIGGKMHMM-GTQG-YA-M-RPCDWESKMMVTFVKVVPPALTCIF-FIPA-QPHTMTGWALYDRY-M-V-C-RMC-HEVEPC-KWFVIDVDH-NQNDSIMRSHPSERGTTG--ICDQKHHNLQHCNWELDGPPEISMTYPILN-SELDLGWYHLWCGDGPMHPKFGRDRGVTEWKVTIKTPFNLAPTIENIDAQSITRWSQYMINKADMWQLQRVPHKCT-P-KDCYFGQQSFNER---EL-C--IWLADPLMAIAMFY--KP-L-V-D--PPIE-MEPKIESFA-MYKA-V-PKSGS---WIVVQIIYTPETTGWIEHYDT-STWTNQRHPLLLGWFSMWSCFENIFAWESMKKMTDYAKEPTMRRAAIWLGEDSQQMSSYFVHHKCCRHYNEHLRLLVPCSVIQRCQQDKWNESCQWHHPDPREPWQFGIKKPSYAWWDLLNTCAPFYPDHKNTYCCKMANRAASQDWKSNGDRHNAPVIRME--------NMYKSVPERPDT------S-K-ND-----Q--HPDMFTENTQ-----TIVFCHHDIGWCWLGHIQYSCCHYACVIICIEMLKPLCNWMHRIESQCTIVNQSFASRTTCQDQSF--YLIYEMFVIAYEIWDKNAPQMFPYYYYWRWVDRTDCHVQDETDGGCWTKEDCAGCSCSRELSYIEERGYYWVFPYSRTVQAVMMEHVPGWCYMSGVFLKLHPLF-HYDIHQT-YIMRAVPTEWT-QDMPKD-HDWKLYQWDLQRKW-SYQVGDELDVG-PGCLRPAVAAAYFQTTC-ILCA-TAYEDYSEKNKEYRHYTACMSGGL-FN-HG-QMESYK-FDW-MDWHRQGGDEKPDGGD-IEH-CYYCS-NEASYTPATY-G-YMCN-ENGSALGRFMVMFVRMFVRASCSNRDLGDRWQWIFTDYWHCDNERAGCEKDMNQNFGGHWPLDYCF-EF--G-WPC-CEQRDCMHLCMCSYMVRVSQ-DFKSIWDERLGMIRDWRFFVSRNLQCMAWTTYKMEFCLQTYSQFILPAR-LQ-E-VCDGLWLSDCHNYNWGRIMKWGQLKKVMVPRW-EMMIAMRWDTRERWMYYVSHSDAEVAEPSVE-L-NLGGMHAIKSTTWMWVKSTKTC-RECMNNIYSVFTTCKKKIAMTFTHKP-I-KHDKPHTFRCMSNQTEPVCHCHDFHCIWKGFGLMHSGLESQFVDIHCKRPWIIHDKRQHSLGIAALKTCYC-GVRKNGRG-AQTNGR-ETGDGAEGIQLQIHLHAVRLKVVAHFSNAVLYDGSKRYMENQKHHMTLKSP--SNMPYTN-G--CENGWYRPCHVQAYVANADFASPLEPMVYTKWWDEGSSWLKNRRGCQATQKSQKPKSMRELW-L-VTHL-VGAHEGNCDHRLLFQYPRW--IFHSNKYPDGWKHAHRA-WDP-D-SYGDF-WVKHGHHDLLLACKEEVLCTL-Y---NFCKQEL-ENLGWVCCVL-MNV-C--WISHFGNGNYPYWHHRHWLHMENDCD-IAEELKRVQGYLYRHKWW-VG-WELC--DF-FQANQD-N-H-ES-RLQRLHQHR-L-TH-NHCRFPKVRQQDIAVFWEVVSICGANRLVHIFACMIIKDAHMV-ERVHNLCDPTWWPQHLAMNSMGWYMQKLVEFMTPCGNLWSRKFCQIQMHGW-VYF-PRHWWYSI-PDEAMVGVRNNESTASVIRVYFDEDINPT-NSNPNRKPENHCKELLLNMMGCVRCAFNRKLTPHKEQSVSY-MFIHQ-CYPLCAYNMRCMTTRCESHMTHEFQPGWRRQMETLVICRDAIVQFVMTVMIKRRMTDYSMSITYQEWTFKCLRHNFALRCKSGC-AFVLEDQDVQ-LHGL-PM-----KWYA-MFNDMY-M-F--KCIRTYIDEYASPDYNWNQPRWLITYATNTGSHAKTRQSNE-NC-RRRIF-YDY-NRGMWLV---LCTRERIH-WWSLPYRKVHVLIPGHISASEHYQNLNNPPMY-KAGMAEK-SPGWQ-VTICRIEDVRPFDDDHLYGDEQEVHNSGCAQDSVHVKKMTPVLIDCGDRP-IEWTCFQADY-YNKPTHRFWRPDV-KHP--LNKYCHGGCDPDSNRSYCKWEDTCEDTTIKYSRTHSDFNVGSMATKYIDR--EHNKGSE-KWFEG-LG-QR--CNQPGEMKVNF-TLEIMTFKPRMRSFD-HEPESAMHNQY-EFLNDGTTC-MGFE-K-KGIHFFYKNICRNLQQYQCHCPLCYRMLPGQC-ECQNII-VS-PRSVLQ-HLNCKQN-ENMK--TSSACHRKIMHYKMKIYGV-SIERRDQTFAVRMPNFECECWDMWEGSSWLKKWIHRCNDCNLDAPLERPA-H-FKHDSFWCTFGIWLQ-YCCCYSGFFCSMAHMMNYCLWCWEPLFPDKWDEYFSLTYDGVEGWCHDLIEQIDGEMLYGLT-I-PEIMPEGYPRVADDHFPYPEPSDDDSHNDKSEKKRSYLIPSFWQACHCCHFKTQQKC--WACNS-RIYLEADWLKHAILPIGRRLKRVVTKMH-RQVERPVSLMRTFFNPVGCPDT---SDNTGLPDLMNWVGQ--G-ITVGQCWHETIYGLSAVCWSPMLNTQTAEWTGGKYK-TMDGGIARKEGYLGVKKLTQFGDTAWCTWEGHCDTWM-RDYMMHWWYATEDMYQKLIGIG'

    alphabet, scoring_matrix = align.get_blosum62()
    score, ok = align.score_and_check(s1, s2, sol1, sol2, scoring_matrix, alphabet, sigma=5, local=False)
    assert ok

    mysol1 = '--PTGQSYVTTARTTAECRVLHVMPFNYHMAS--IMD-SYVFLNFGPALCMHEWYLCTM--RCGWSKVGLGYMTCFCKNYHMSVKDAAYDGDKE-M-DG-M--TKWCVMPN-CM--WENE-AQDQMQAW-DSKG--WQDFCDD-IKAGMQFIWDSEP-HGNFSEIMSMPFDIDVTIFHMQEPEIVQWTMNPQHS-PH-RPKSCTMASW-RTQHHTAWNHCP---VSASAFQPQVDVCDNV--RFYGETAMNI-VGGQA-EA-E---KMKIHPSY-QGH--IHL-C-IGN-EDTDGQQLWCQNH-MQH-EPFRYNDSDGDVTYQKHPACAAIPN-I--HSWF-QPWGIDYQSNRQFGNQMDECYDL-WALRVWDEPSVTWYYRHDLHDHSESWQRCETNVMW-YKGAKDMRGDLWSPRVMIMVPFLTVWRCGVTCGWLWPKSFSKAMMRAQKIHEFPQQRIK-TN-G-AKPDNE-REWQAHHAFNTECKFVGPKPILLSKPWRQVDYDYCSFSDDMHFRKCVLTDEFFNVVSTKMVS-QCWFWADTLNPE-VSNQF-MTQE-YIV-KMTS-VCEVLNGV-GGLPF-VTADSCSSPVIEWGLWTNDQWEGFFKLYWV-MLDNDKNPVKWPHNR-GI--VHGMWPI-WWIEQNPIKVGQACMW-YPLIDNYWEDNRDV-LKPKEDM-MAI--DIS-GQ-V-K----GWATD--IR-PS--SWS-LYIIPDMVWRGSLCDLARVEYEHK-PWHNCTTYHMRCVIFY-YFAPIGNHNDATIPGWAEWCYWPKMWE--GYV-MVNCFTEQQHQAEAAVAWGWYGCTPNVP-PVSPIMQSFKMFICPNQFQDLKLMQDPCWVLNK-FSVNERQLDH-CPMDASDHWSPSHNRWNLTFQAWPGRQEFAWPVLFFFSDVWWDAHDYI-YVNVM----GYTVY-H-AWSASWVVTQLGNI-HGECWNCMVPPEIVMSNTNQKYEHYMIASREMVTPHRRRYAVCTFRNLAWKSFDQQFFC-RENFIGIFPADCG--IIKCEVFRDLQEFFDRE-NSKCDQNSQKNMHK-F-KYCFQFQPQDPVKQRL-NPVHPWCRSEEDGLRTQEDIVRPAQYNEWPMHQNDAKLVQGCCIYKYKRKWIPRKYLKTYGTNMPEHFYYQRQVLSRYGSMRRMWIKNEQYVDHRDRYVMLEPGCETFFYSFVMEWDEINDNNSRSKEVAPPKEFDYMYNNTCHDTWRFSEQVKNDNQTQFFV-KQTFVRLHLQLDQILPEAIFMSF-TLD-WPQYGY-QIAKGNTFKCMQFTNYKGSTFGWLDVGPGNRPRHWWKTVFWQKWWISMWLDVQDLSKDAFDNMWEKQAMQKPKFHDTRFL-QAESKDTRSKEADSKVDPWWRQHSQERFYPGGSECCWM--D-AL-HPLK-LRNFVEFVVVTKLPNCLWHAFFQYFPEMWLCFMDHA-SPKQKVWRMNCYRADFCY-FMCELGYETDDR-SAETAIV-MYEPMQMGW-NHWW--WLTWL-HMA-C-TLIIDHIMMNLQV-ALYGCIQPL-NFWMATFHLVWQAK-VFFFFAFERFHTHVIMCQ-KAKENESHRLQPEE-RMSKWHYTCCGTMFHVNWHAEQGKSGMYTQALRLTHFTVWD-QGSHLM-CTGIY-MDMPQNHC-SW-ARHRTDPCA-L-V-VHWG-P-K-VPKPNDTFGCHPNNSEIEPFPPRDDAQANHIEDCHEYRFCGMTHN-AYTDH-P-GFLRNCTENVT-EKIMEGPLYPWDNDRGSHAQLVM-WCRVASEAVQWVSSGYKGINSAYRYVNLWGKHICRAWQDWD-WVGVHIQCNHIWGQETDPDEQWLCIHENGINFFDSNLADYTAEQEDFGDWYC-QKSH-L-H-S-KVD----VKQ-YSQIAT-IIWTWQHTNCGCSTCWVPL-H-R-I--FSLDNDVP-PCIQVYMG-DKRQMWR-NKDNHNKSQMTYM-KL--ECMFPDKD--FRQQSTGERPVTELMCKNIWTVH-YCYIAMFYDVEPKCDIEDCYMGVAYMMSFAEGFMHMYKALVCPKSGSMYDWTVVQIIYTWQYF-WHRPETTESTWTNQRHPLQLGW-NT-SLMENIFAIESMKKMTCYAKEPTMRRAAIWL----VQMSSYMVHHKCPRHYNEHLRLLVPCS--W-CQQDKWNESCQWHHPD---P--Y-IMKPSYAWWDLLNTCDPVW--RRNTYCCKMANRAAHQDWSSNGDRHNYPVIRMENTSDTHNMNMYESVPERPDTFCGLNSSLQGHEWQMYSQAHHPDMFTENMQDYYYGTIVFCHAGICWCWLMHIQYSCCHYAC---CIP-LKPLCAF---IESQCQIVNQSFASRTTCQDQSFPHYLIYEDFVIAYEIWDKTAPQMFPFYYYWRWVDRTDCHVQDETDGS-WTKEDCAGCSCSRELSYM---GFNWVFPYSRTVQ-LMMEHVPGWCYMSGVFLKLHP-FVGMIQKGKTHHIWHG--DRWHGKGYNVSTDYYDCVYYEPCLRNKYMSDVIGYTGWLGWVQTLTDHVKSSPSKGR-IPVWNQFTQVKKYQVMEHLFYKGAHQDHICVTCEGWVMPPNQCF-WFQDQDSQCSLQS-DQMERLEAVCYPTMWYRGAWKRHNHTRLWLTTYDPGYCRNRDWA-WVTCCNCIAALMQQESNRKYQWCWC-YWSTNHPMHNSDIYVVWDDDGERP-DGCSNEIRQAKRPCTCDISDARPL-KI-YMIYCFPCEGKYI-DIWMGKMRAFD-FL--NFMDGKF-TIR-DGAIFP-PQMV-PCNVLVFELVYKSVW-AETPTIR-GWYQCW-PAQKVYANGWISMLVIM--DFAQK-K-FVGHDLSTATCMNHRVDCFKNNVRRH-VEPPL-MLIMN-KIWCEHDFMTAM-DVIIYASPDMYM--PGKPYLGTFQYPYLYK--HGSSDYV-EL-EASKI-NGY-MPYWCHESE--DSTC-H--ALHDP-AH-CDLRWMFMC-CPRTTKPYVWMCNTWIRYDKQDLAP-VNSFIPAHQ-DVHPYCTCGRAV-WT-QKRFWKAWWFLITCPDPHDSYRSFDEVGEPIETACRDDCVINIYHSQYNMSSWAKAVAFIKWMTPLQPY-E-PCFCQKMEFKQWWEKLCVAWSQPVFNFSIPKHVFIVE-RYI-EDEHWEVIYWMKKFVIP-K-LHMGPWQSCTIGYREYACIGIDAHD-PYRCGDKNMANMRFPWWDIISFLLFQPLPMECSYHGQGTFCLKWIA-ARNGTYQFRIVEVYKFSSAEVNRNTQYFSHHHMMLMPHNFYHMGTFDYCWLKYPFPTMDWNVSTTSPNILGLENHKDLCIMVMNCE-REMTPERIMQYKVLLSLWREN--V-VMPCCLIALVNLLGQNKEN--TPLDCPK-MPM-VMDYHPRKF--WLSP-GFIGKYHIAQ-RTRQWRLIFCPAQTKMDVCASYPFPGPR-TDHTRS-MWL-MGHSTAPEFMFMTNKNMQIGCPP--VGAQGHVEPPTRQRKGKHQYVCEPWKMWKHKPQWRAWAINWKKVIT-CWS-VSFDF-P-W-DSIFTVKDCELRGGSFAM--M-RKAYQPPRMS-QL-PWVVKC---NFS-P-KQGYEQYITVDGKTQKTRVIDPMPDPHHATYGIMFSHQYTVNWIHNCERLTMAKINRVYFTIIADRW-GHYCVNI-NH-QTLQMDDMMCYDDSVSGQGYLCMCCTIIPWGQCVNAYIHRCWHCTDVYIHRLLPEQETVFQFCDNHMMAQMHLMPTLNEKGSFSWQ-RVMS-GGVFWIVNGCNMYA--FS-HH-WLA-PH-HDRTNQGVYM-L-SQPQMCW-ALNDDHTYHKNNINAWEPPIGTHTGWLRAEEMTG-SPD--RLLLIWGFMCR--AM-YS-CHLDACARNLQFNFLMKVGHHNQHQYWAWCEQCLDCKSWDTNASSKLEFNYETLTDLTGHPPQRP-DVFFCDDCV-A-YCEFLKH-TSPLDRWYEPRPRRLGQWVKSLGSG-NPPACF-EWCY--IRYDCWYC-NVVPIEHTEDPMHWHENWDNNCIGQQHWINVMC-QMMTPNNAGIHPVRPCIHPDDN--VRMP-YECHNMEP-ERVQFVDQVTGAPYRANATLPCDHDGFEAFMAPDLTETY-VQDQKYCKGVP-FQMSKPNQASIPLWSY-ILYSCEM-ACIEI-YI-MKGWM--LKQSFHGSPHKTVTCIGTHCMIRHQACCNNDKFAVANRAHEFRWY-WARLNGQKMI-EFFESFRDM-IKI-SPCMRWRDDAPGSGLHI-WAAHIFMEV-EKLVWTLAIMNCAYAAYPV--MEP--HPLGW--V-D-TGYVK-SHFQLAYSICFCGQIINR-IMILQA-RYQYVAPATCRLHSCGDDAALTPVNWSFNMGHGMPNINYILNWNRKRWGNFR-H-QMHIPPGQQCRCWRALKDDNVMHEDTT'

    mysol

    score2, ok2 = align.score_and_check(s1, s2, mysol1, mysol2, scoring_matrix, alphabet, sigma=5, local=False)
    assert ok2
    pass


from random import sample, seed


def rapid_fire(l=3, k=4):
    alphabet, scoring_matrix = align.get_blosum62()
    seed(42)

    count = 1
    while True:
        s1 = []
        for _ in range(0, l):
            s1.append(sample(alphabet, 1)[0])
        s1 = ''.join(s1)
        s2 = []
        extra = sample(list(range(0, k)),1)[0]
        for _ in range(0, l+extra):
            s2.append(sample(alphabet, 1)[0])
        s2 = ''.join(s2)
        print(count, s1, s2)
        count += 1
        score, path = align.linear_space_alignment(s1, s2, alphabet, scoring_matrix, sigma=5)
        aligned = align.aligned_strings_from_path(s1, s2, path)


def test_linear_space_alignment():
    alphabet, scoring_matrix = align.get_blosum62()

    s1 = 'PS'
    s2 = 'IP'
    score, path = align.linear_space_alignment(s1, s2, alphabet, scoring_matrix, sigma=5)
    aligned = align.aligned_strings_from_path(s1, s2, path)

    s1 = 'PLE'
    s2 = 'MEA'
    score, path = align.linear_space_alignment(s1, s2, alphabet, scoring_matrix, sigma=5)
    aligned = align.aligned_strings_from_path(s1, s2, path)
    assert score == -3
    assert aligned == ('PLE-', '-MEA')

    s1 = 'PLEASANTLY'
    s2 = 'MEANLY'
    score, path = align.linear_space_alignment(s1, s2, alphabet, scoring_matrix, sigma=5)
    aligned = align.aligned_strings_from_path(s1, s2, path)
    assert score == 8
    assert aligned == ('PLEASANTLY', '-MEA--N-LY')

    s1 = 'PTGQSYVTTARTTAECRVLHVMPFNYHMASIMDSYVFLNFGPALCMHEWYLCTMRCGWSKVGLGYMTCFCKNYHMSVKDAAYDGDKEMDGMTKWCVMPNCMWENEAQDQMQAWDSKGWQDFCDDIKAGMQFIWDSEPHGNFSEIMSMPFDIDVTIFHMQEPEIVQWTMNPQHSPHRPKSCTMASWRTQHHTAWNHCPVSASAFQPQVDVCDNVRFYGETAMNIVGGQAEAEKMKIHPSYQGHIHLCIGNEDTDGQQLWCQNHMQHEPFRYNDSDGDVTYQKHPACAAIPNIHSWFQPWGIDYQSNRQFGNQMDECYDLWALRVWDEPSVTWYYRHDLHDHSESWQRCETNVMWYKGAKDMRGDLWSPRVMIMVPFLTVWRCGVTCGWLWPKSFSKAMMRAQKIHEFPQQRIKTNGAKPDNEREWQAHHAFNTECKFVGPKPILLSKPWRQVDYDYCSFSDDMHFRKCVLTDEFFNVVSTKMVSQCWFWADTLNPEVSNQFMTQEYIVKMTSVCEVLNGVGGLPFVTADSCSSPVIEWGLWTNDQWEGFFKLYWVMLDNDKNPVKWPHNRGIVHGMWPIWWIEQNPIKVGQACMWYPLIDNYWEDNRDVLKPKEDMMAIDISGQVKGWATDIRPSSWSLYIIPDMVWRGSLCDLARVEYEHKPWHNCTTYHMRCVIFYYFAPIGNHNDATIPGWAEWCYWPKMWEGYVMVNCFTEQQHQAEAAVAWGWYGCTPNVPPVSPIMQSFKMFICPNQFQDLKLMQDPCWVLNKFSVNERQLDHCPMDASDHWSPSHNRWNLTFQAWPGRQEFAWPVLFFFSDVWWDAHDYIYVNVMGYTVYHAWSASWVVTQLGNIHGECWNCMVPPEIVMSNTNQKYEHYMIASREMVTPHRRRYAVCTFRNLAWKSFDQQFFCRENFIGIFPADCGIIKCEVFRDLQEFFDRENSKCDQNSQKNMHKFKYCFQFQPQDPVKQRLNPVHPWCRSEEDGLRTQEDIVRPAQYNEWPMHQNDAKLVQGCCIYKYKRKWIPRKYLKTYGTNMPEHFYYQRQVLSRYGSMRRMWIKNEQYVDHRDRYVMLEPGCETFFYSFVMEWDEINDNNSRSKEVAPPKEFDYMYNNTCHDTWRFSEQVKNDNQTQFFVKQTFVRLHLQLDQILPEAIFMSFTLDWPQYGYQIAKGNTFKCMQFTNYKGSTFGWLDVGPGNRPRHWWKTVFWQKWWISMWLDVQDLSKDAFDNMWEKQAMQKPKFHDTRFLQAESKDTRSKEADSKVDPWWRQHSQERFYPGGSECCWMDALHPLKLRNFVEFVVVTKLPNCLWHAFFQYFPEMWLCFMDHASPKQKVWRMNCYRADFCYFMCELGYETDDRSAETAIVMYEPMQMGWNHWWWLTWLHMACTLIIDHIMMNLQVALYGCIQPLNFWMATFHLVWQAKVFFFFAFERFHTHVIMCQKAKENESHRLQPEERMSKWHYTCCGTMFHVNWHAEQGKSGMYTQALRLTHFTVWDQGSHLMCTGIYMDMPQNHCSWARHRTDPCALVVHWGPKVPKPNDTFGCHPNNSEIEPFPPRDDAQANHIEDCHEYRFCGMTHNAYTDHPGFLRNCTENVTEKIMEGPLYPWDNDRGSHAQLVMWCRVASEAVQWVSSGYKGINSAYRYVNLWGKHICRAWQDWDWVGVHIQCNHIWGQETDPDEQWLCIHENGINFFDSNLADYTAEQEDFGDWYCQKSHLHSKVDVKQYSQIATIIWTWQHTNCGCSTCWVPLHRIFSLDNDVPPCIQVYMGDKRQMWRNKDNHNKSQMTYMKLECMFPDKDFRQQSTGERPVTELMCKNIWTVHYCYIAMFYDVEPKCDIEDCYMGVAYMMSFAEGFMHMYKALVCPKSGSMYDWTVVQIIYTWQYFWHRPETTESTWTNQRHPLQLGWNTSLMENIFAIESMKKMTCYAKEPTMRRAAIWLVQMSSYMVHHKCPRHYNEHLRLLVPCSWCQQDKWNESCQWHHPDPYIMKPSYAWWDLLNTCDPVWRRNTYCCKMANRAAHQDWSSNGDRHNYPVIRMENTSDTHNMNMYESVPERPDTFCGLNSSLQGHEWQMYSQAHHPDMFTENMQDYYYGTIVFCHAGICWCWLMHIQYSCCHYACCIPLKPLCAFIESQCQIVNQSFASRTTCQDQSFPHYLIYEDFVIAYEIWDKTAPQMFPFYYYWRWVDRTDCHVQDETDGSWTKEDCAGCSCSRELSYMGFNWVFPYSRTVQLMMEHVPGWCYMSGVFLKLHPFVGMIQKGKTHHIWHGDRWHGKGYNVSTDYYDCVYYEPCLRNKYMSDVIGYTGWLGWVQTLTDHVKSSPSKGRIPVWNQFTQVKKYQVMEHLFYKGAHQDHICVTCEGWVMPPNQCFWFQDQDSQCSLQSDQMERLEAVCYPTMWYRGAWKRHNHTRLWLTTYDPGYCRNRDWAWVTCCNCIAALMQQESNRKYQWCWCYWSTNHPMHNSDIYVVWDDDGERPDGCSNEIRQAKRPCTCDISDARPLKIYMIYCFPCEGKYIDIWMGKMRAFDFLNFMDGKFTIRDGAIFPPQMVPCNVLVFELVYKSVWAETPTIRGWYQCWPAQKVYANGWISMLVIMDFAQKKFVGHDLSTATCMNHRVDCFKNNVRRHVEPPLMLIMNKIWCEHDFMTAMDVIIYASPDMYMPGKPYLGTFQYPYLYKHGSSDYVELEASKINGYMPYWCHESEDSTCHALHDPAHCDLRWMFMCCPRTTKPYVWMCNTWIRYDKQDLAPVNSFIPAHQDVHPYCTCGRAVWTQKRFWKAWWFLITCPDPHDSYRSFDEVGEPIETACRDDCVINIYHSQYNMSSWAKAVAFIKWMTPLQPYEPCFCQKMEFKQWWEKLCVAWSQPVFNFSIPKHVFIVERYIEDEHWEVIYWMKKFVIPKLHMGPWQSCTIGYREYACIGIDAHDPYRCGDKNMANMRFPWWDIISFLLFQPLPMECSYHGQGTFCLKWIAARNGTYQFRIVEVYKFSSAEVNRNTQYFSHHHMMLMPHNFYHMGTFDYCWLKYPFPTMDWNVSTTSPNILGLENHKDLCIMVMNCEREMTPERIMQYKVLLSLWRENVVMPCCLIALVNLLGQNKENTPLDCPKMPMVMDYHPRKFWLSPGFIGKYHIAQRTRQWRLIFCPAQTKMDVCASYPFPGPRTDHTRSMWLMGHSTAPEFMFMTNKNMQIGCPPVGAQGHVEPPTRQRKGKHQYVCEPWKMWKHKPQWRAWAINWKKVITCWSVSFDFPWDSIFTVKDCELRGGSFAMMRKAYQPPRMSQLPWVVKCNFSPKQGYEQYITVDGKTQKTRVIDPMPDPHHATYGIMFSHQYTVNWIHNCERLTMAKINRVYFTIIADRWGHYCVNINHQTLQMDDMMCYDDSVSGQGYLCMCCTIIPWGQCVNAYIHRCWHCTDVYIHRLLPEQETVFQFCDNHMMAQMHLMPTLNEKGSFSWQRVMSGGVFWIVNGCNMYAFSHHWLAPHHDRTNQGVYMLSQPQMCWALNDDHTYHKNNINAWEPPIGTHTGWLRAEEMTGSPDRLLLIWGFMCRAMYSCHLDACARNLQFNFLMKVGHHNQHQYWAWCEQCLDCKSWDTNASSKLEFNYETLTDLTGHPPQRPDVFFCDDCVAYCEFLKHTSPLDRWYEPRPRRLGQWVKSLGSGNPPACFEWCYIRYDCWYCNVVPIEHTEDPMHWHENWDNNCIGQQHWINVMCQMMTPNNAGIHPVRPCIHPDDNVRMPYECHNMEPERVQFVDQVTGAPYRANATLPCDHDGFEAFMAPDLTETYVQDQKYCKGVPFQMSKPNQASIPLWSYILYSCEMACIEIYIMKGWMLKQSFHGSPHKTVTCIGTHCMIRHQACCNNDKFAVANRAHEFRWYWARLNGQKMIEFFESFRDMIKISPCMRWRDDAPGSGLHIWAAHIFMEVEKLVWTLAIMNCAYAAYPVMEPHPLGWVDTGYVKSHFQLAYSICFCGQIINRIMILQARYQYVAPATCRLHSCGDDAALTPVNWSFNMGHGMPNINYILNWNRKRWGNFRHQMHIPPGQQCRCWRALKDDNVMHEDTT'
    s2 = 'QVPFPTVDVIVCCTGIKCEPMNVGYDQQMKDCFICTREYDIRRLHTIVCGSEWACRLWIEADWEDCEKSFRDFDAPINIVQYAVWRANVETQCPGYLNRTQWIMIGYWFIGTWNAVLIVPKSPAQIETDGIVYKIPCNRYFEHGPYFWRSPWAGPYPTVDRHDSVCHGHLKYGSLPSCQNWEFARPHDLGDACMWEKPQLQLNWNPRPRAIISTGTFSPEQTFWDGMPWKYFWKCPSSVQANKRLYKVLTVVCRQENHGYKETHRKFHIKCLVGQLNQPKPWCVYCVVYRSDYPPPQRWTFWGTPQYIMCFVKPHKLSDESAIGNWWNIGPCDRLVASAWEHCKRLGWYPHGWAKSMFPHMNIMGCSRKFRKASIEWPIMSHVGYCAHWHPFSRRVQFESNINQSLRWVVMSSFKDTDDHVALVCLTPAGEIPVTNVGQALAEQSYRIWSAQEHRAPFTGWMNLFCSIGMTMYIEKCSREPIIKDHDCFNDTADPSDTKVTSWMRKYWIEEDPTWRSNMIHMMGSIFSCNRMSNFMCYPESVRADWPIELWPGRLAIGFMNMGVASLEHYFPFIGFWVDYAPSPSEEHQWRHDAYAYDEVYAMVPMDCKLEGQTYTQCMMWKIDLVLLWSGNSEICIEQHESFSRSIYGHVSKAQAVMKYARRGPAHEQFVTGKSQHSQDCTHISPKIMLHSSIRIVAKHDMLRKEPHSDYHMLKTEFQDKYERMTTMMWGFPDWELPHTEQRHKLAGEVRQATASHYQQYYKPDHGTHEYVCPQPCLIAPWASGTPEFEMAYQLTCNGMFAKCYNRRTGQQVLQISVSHSCMRTKMANWYPSMDMFLEMSNGNADLASNRIGHFSYGHEFVEHPNVMWRPDGGRCHGHEAICNGLAYQYMWPVYHNRCNAKWVEVVHHQDSNFLPMIHGAGSHLHHQLAICYLLVCPVTGARCVGENLINFLVIICNWELIVFLIIEMVAEGLRRPMRNKCQATSFNLETYFRKKRMQCTLNRPYMTRTRRPHLWGPELRATNKQRDLPVTAVPCNQAQCKKFWGGVQDQSNDDVNWRDTKWDFSWGFSPAKVHWHQCVYDQGFHNLEYNPCLHWIWYMYTWMIAFERTVGKACHNWEQIPIDSLNNFQVHTDIWIELHCMNMSPYAFVNYSTCNAVAAKWYLELAIAHQSEPQKWFYFVSFILDSRFSPHNMVFYATSDGYRDKLKPLEFDIMMKRGTWTPEHWQSFTPHRKISPVHSTGIHEAVDIYQYFHEPFAMEPACKCMVMIYTVAIVHFKCIANHEVSGGTEINLVRCFHIWHCEEWKYMCHSWFEYNAIFRCEAMLCWKLFCGQSPIDMLTVEVKILWAVTPQMIACADAYLRPFMDWIGAFSLCQQTFCDLFAWPPQVQRFYWTVKEVEEQWYSHWVGKSVNINSSSDHNNRWVLWPYFKLLFNVANHQPDHCREAVWYNVASDRPHVFCMMAGGVPQKTMINQFRHSIIFSVQNPHFYGMQPTWCSERVALVCPKWHAPNAIPPPKFMHARAFWAVPTKCVYQEHDHYWHNHKTSHFPGTSPDIYEVRAQFRSAETHNHPYNDYKPLMFVKTHITIAKFIGGKMHMMGTQGYAMRPCDWESKMMVTFVKVVPPALTCIFFIPAQPHTMTGWALYDRYMVCRMCHEVEPCKWFVIDVDHNQNDSIMRSHPSERGTTGICDQKHHNLQHCNWELDGPPEISMTYPILNSELDLGWYHLWCGDGPMHPKFGRDRGVTEWKVTIKTPFNLAPTIENIDAQSITRWSQYMINKADMWQLQRVPHKCTPKDCYFGQQSFNERELCIWLADPLMAIAMFYKPLVDPPIEMEPKIESFAMYKAVPKSGSWIVVQIIYTPETTGWIEHYDTSTWTNQRHPLLLGWFSMWSCFENIFAWESMKKMTDYAKEPTMRRAAIWLGEDSQQMSSYFVHHKCCRHYNEHLRLLVPCSVIQRCQQDKWNESCQWHHPDPREPWQFGIKKPSYAWWDLLNTCAPFYPDHKNTYCCKMANRAASQDWKSNGDRHNAPVIRMENMYKSVPERPDTSKNDQHPDMFTENTQTIVFCHHDIGWCWLGHIQYSCCHYACVIICIEMLKPLCNWMHRIESQCTIVNQSFASRTTCQDQSFYLIYEMFVIAYEIWDKNAPQMFPYYYYWRWVDRTDCHVQDETDGGCWTKEDCAGCSCSRELSYIEERGYYWVFPYSRTVQAVMMEHVPGWCYMSGVFLKLHPLFHYDIHQTYIMRAVPTEWTQDMPKDHDWKLYQWDLQRKWSYQVGDELDVGPGCLRPAVAAAYFQTTCILCATAYEDYSEKNKEYRHYTACMSGGLFNHGQMESYKFDWMDWHRQGGDEKPDGGDIEHCYYCSNEASYTPATYGYMCNENGSALGRFMVMFVRMFVRASCSNRDLGDRWQWIFTDYWHCDNERAGCEKDMNQNFGGHWPLDYCFEFGWPCCEQRDCMHLCMCSYMVRVSQDFKSIWDERLGMIRDWRFFVSRNLQCMAWTTYKMEFCLQTYSQFILPARLQEVCDGLWLSDCHNYNWGRIMKWGQLKKVMVPRWEMMIAMRWDTRERWMYYVSHSDAEVAEPSVELNLGGMHAIKSTTWMWVKSTKTCRECMNNIYSVFTTCKKKIAMTFTHKPIKHDKPHTFRCMSNQTEPVCHCHDFHCIWKGFGLMHSGLESQFVDIHCKRPWIIHDKRQHSLGIAALKTCYCGVRKNGRGAQTNGRETGDGAEGIQLQIHLHAVRLKVVAHFSNAVLYDGSKRYMENQKHHMTLKSPSNMPYTNGCENGWYRPCHVQAYVANADFASPLEPMVYTKWWDEGSSWLKNRRGCQATQKSQKPKSMRELWLVTHLVGAHEGNCDHRLLFQYPRWIFHSNKYPDGWKHAHRAWDPDSYGDFWVKHGHHDLLLACKEEVLCTLYNFCKQELENLGWVCCVLMNVCWISHFGNGNYPYWHHRHWLHMENDCDIAEELKRVQGYLYRHKWWVGWELCDFFQANQDNHESRLQRLHQHRLTHNHCRFPKVRQQDIAVFWEVVSICGANRLVHIFACMIIKDAHMVERVHNLCDPTWWPQHLAMNSMGWYMQKLVEFMTPCGNLWSRKFCQIQMHGWVYFPRHWWYSIPDEAMVGVRNNESTASVIRVYFDEDINPTNSNPNRKPENHCKELLLNMMGCVRCAFNRKLTPHKEQSVSYMFIHQCYPLCAYNMRCMTTRCESHMTHEFQPGWRRQMETLVICRDAIVQFVMTVMIKRRMTDYSMSITYQEWTFKCLRHNFALRCKSGCAFVLEDQDVQLHGLPMKWYAMFNDMYMFKCIRTYIDEYASPDYNWNQPRWLITYATNTGSHAKTRQSNENCRRRIFYDYNRGMWLVLCTRERIHWWSLPYRKVHVLIPGHISASEHYQNLNNPPMYKAGMAEKSPGWQVTICRIEDVRPFDDDHLYGDEQEVHNSGCAQDSVHVKKMTPVLIDCGDRPIEWTCFQADYYNKPTHRFWRPDVKHPLNKYCHGGCDPDSNRSYCKWEDTCEDTTIKYSRTHSDFNVGSMATKYIDREHNKGSEKWFEGLGQRCNQPGEMKVNFTLEIMTFKPRMRSFDHEPESAMHNQYEFLNDGTTCMGFEKKGIHFFYKNICRNLQQYQCHCPLCYRMLPGQCECQNIIVSPRSVLQHLNCKQNENMKTSSACHRKIMHYKMKIYGVSIERRDQTFAVRMPNFECECWDMWEGSSWLKKWIHRCNDCNLDAPLERPAHFKHDSFWCTFGIWLQYCCCYSGFFCSMAHMMNYCLWCWEPLFPDKWDEYFSLTYDGVEGWCHDLIEQIDGEMLYGLTIPEIMPEGYPRVADDHFPYPEPSDDDSHNDKSEKKRSYLIPSFWQACHCCHFKTQQKCWACNSRIYLEADWLKHAILPIGRRLKRVVTKMHRQVERPVSLMRTFFNPVGCPDTSDNTGLPDLMNWVGQGITVGQCWHETIYGLSAVCWSPMLNTQTAEWTGGKYKTMDGGIARKEGYLGVKKLTQFGDTAWCTWEGHCDTWMRDYMMHWWYATEDMYQKLIGIG'
    score, path = align.linear_space_alignment(s1, s2, alphabet, scoring_matrix, sigma=5)
    aligned = align.aligned_strings_from_path(s1, s2, path)
    assert score == 1387
    print()
    print(score)
    print(aligned[0])
    print(aligned[1])
